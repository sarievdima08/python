"""
1.	Пользователь вводит данные о количестве предприятий, их наименования и прибыль
за 4 квартала (т.е. 4 отдельных числа) для каждого предприятия.
Программа должна определить среднюю прибыль (за год для всех предприятий)
и вывести наименования предприятий, чья прибыль выше среднего и отдельно
вывести наименования предприятий, чья прибыль ниже среднего.

Подсказка:
Для решения задачи обязательно примените какую-нибудь коллекцию из модуля collections
Для лучшее освоения материала можете даже сделать несколько решений этого задания,
применив несколько коллекций из модуля collections

Пример:
Введите количество предприятий для расчета прибыли: 2
Введите название предприятия: Рога
через пробел введите прибыль данного предприятия
за каждый квартал(Всего 4 квартала): 235 345634 55 235

Введите название предприятия: Копыта
через пробел введите прибыль данного предприятия
за каждый квартал(Всего 4 квартала): 345 34 543 34

Средняя годовая прибыль всех предприятий: 173557.5
Предприятия, с прибылью выше среднего значения: Рога

Предприятия, с прибылью ниже среднего значения: Копыта
"""

from collections import namedtuple

Enterprise = namedtuple('Enterprise', 'name, q1, q2, q3, q4, y')
n = int(input("How many enterprises do you have? "))
e_list = []  # list of enterprises
y_all = 0  # yearly profit from all enterprises
y_mean = 0  # mean yearly profit

for i in range(n):
    print(f'Enterprise {i+1}')
    name = input("Enterprise name: ")
    q1 = float(input("Q1 profit, $: "))
    q2 = float(input("Q2 profit, $: "))
    q3 = float(input("Q3 profit, $: "))
    q4 = float(input("Q4 profit, $: "))
    y = q1 + q2 + q3 + q4
    y_all += y
    y_mean = y_all / (i + 1)
    E = Enterprise(name, q1, q2, q3, q4, y)
    e_list.append(E)

above_mean = {}
below_mean = {}

for j in range(n):
    if e_list[j].y >= y_mean:
        above_mean[e_list[j].name] = e_list[j].y
    else:
        below_mean[e_list[j].name] = e_list[j].y

print("*" * 50)
print(f'Summary:\nYearly profit from all enterprises: {y_all}\nYearly average profit: {y_mean}')

print("\nEnterprises with profits equal to or greater than average:")

for k, v in above_mean.items():
    print(k, v)

print("\nEnterprises with profits lower than average:")

for k, v in below_mean.items():
    print(k, v)

print("*" * 50)


"""
2.	Написать программу сложения и умножения двух шестнадцатеричных чисел.
При этом каждое число представляется как массив, элементы которого это цифры числа.
Например, пользователь ввёл A2 и C4F. Сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

Подсказка:
Для решения задачи обязательно примените какую-нибудь коллекцию из модуля collections
Для лучшее освоения материала можете даже сделать несколько решений этого задания,
применив несколько коллекций из модуля collections
Также попробуйте решить задачу вообще без collections и применить только ваши знания по ООП
(в частности по перегрузке методов)
"""
from collections import OrderedDict, deque

HEX_NUMS = '0123456789ABCDEF'


def hex_to_decimal(num):
    hex_number = OrderedDict()

    for key, value in enumerate(HEX_NUMS):
        hex_number[value] = key

    return sum([hex_number[j] * (16 ** i) for i, j in enumerate(num)])


def decimal_to_hex(num):
    dec_number = OrderedDict()

    for key, value in enumerate(HEX_NUMS):
        dec_number[key] = value

    lst = []

    while num > 0:
        lst.append(num % 16)
        num = num // 16

    return [dec_number[i] for i in lst[::-1]]


first_num = deque((input('Введите первое шестнадцатеричное число: ')).upper())
second_num = deque((input('Введите второе шестнадцатеричное число: ')).upper())

first_num.reverse()
second_num.reverse()

first_num_int = hex_to_decimal(first_num)
second_num_int = hex_to_decimal(second_num)

hex_summ = decimal_to_hex(first_num_int + second_num_int)
hex_multi = decimal_to_hex(first_num_int * second_num_int)

print(f'Сумма введенных чисел: {hex_summ}')
print(f'Произведение: {hex_multi}')






